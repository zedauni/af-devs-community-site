// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Media {
  id            String            @id @default(ulid()) @db.VarChar(26)
  mimeType      String            @db.VarChar(100)
  filePath      String            @db.VarChar(255)
  fileSize      BigInt
  name          String            @unique @db.VarChar(255)
  description   String?           @db.Text
  createdBy     String            @db.VarChar(26)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
  deletedAt     DateTime?
  status        String            @default("default") @db.VarChar(20)
  
  // Relations
  creator                User              @relation("MediaCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  postTranslationImages  PostTranslation[] @relation("PostTranslationImage")
  tagTranslationImages   TagTranslation[]  @relation("TagTranslationImage")
  userAvatars            User[]            @relation("UserAvatar")

  @@index([createdBy])
  @@index([mimeType])
  @@index([status])
}

model Post {
  id            String            @id @default(ulid()) @db.VarChar(26)
  kind          String            @default("article") @db.VarChar(50)
  parentId      String?           @db.VarChar(26)
  createdBy     String            @db.VarChar(26)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
  deletedAt     DateTime?
  
  // Relations
  parent        Post?             @relation("PostToPost", fields: [parentId], references: [id], onDelete: Cascade)
  children      Post[]            @relation("PostToPost")
  creator       User              @relation("PostCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  translations  PostTranslation[] @relation("PostTranslations")
  tags          PostToTag[]

  @@index([createdBy])
  @@index([parentId])
  @@index([kind])
}

model PostTranslation {
  id                String    @id @default(ulid()) @db.VarChar(26)
  postId            String    @db.VarChar(26)
  imageId           String?   @db.VarChar(26)
  status            String    @default("draft") @db.VarChar(20)
  publishedAt       DateTime?
  title             String    @db.VarChar(255)
  surTitle          String?   @db.VarChar(255)
  subTitle          String?   @db.VarChar(255)
  postScriptum      String?   @db.VarChar(1024)
  slug              String    @unique @db.VarChar(255)
  excerpt           String?   @db.Text
  excerptRendered   String?   @db.Text
  content           String    @db.LongText
  contentRendered   String    @db.LongText
  locale            String    @db.VarChar(10)
  idealSearchTerm   String?   @db.VarChar(255)
  canonicalUrl      String?   @db.VarChar(255)
  metaData          Json?     @default("{}")
  createdBy         String    @db.VarChar(26)
  updatedBy         String?   @db.VarChar(26)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime?
  
  // Relations
  post              Post      @relation("PostTranslations", fields: [postId], references: [id], onDelete: Cascade)
  image             Media?    @relation("PostTranslationImage", fields: [imageId], references: [id], onDelete: SetNull)
  creator           User      @relation("PostTranslationCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  updater           User?     @relation("PostTranslationUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)

  @@index([createdBy])
  @@index([imageId])
  @@index([title, surTitle, subTitle])
  @@index([locale])
  @@index([postId])
  @@index([status])
  @@index([updatedBy])
}

model Tag {
  id            String           @id @default(ulid()) @db.VarChar(26)
  parentId      String?          @db.VarChar(26)
  kind          String           @default("tag") @db.VarChar(20)
  createdBy     String           @db.VarChar(26)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
  deletedAt     DateTime?
  
  // Relations
  parent        Tag?             @relation("TagToTag", fields: [parentId], references: [id], onDelete: Cascade)
  children      Tag[]            @relation("TagToTag")
  creator       User             @relation("TagCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  translations  TagTranslation[] @relation("TagTranslations")
  posts         PostToTag[]

  @@index([createdBy])
  @@index([parentId])
  @@index([kind])
}

model TagTranslation {
  id                  String    @id @default(ulid()) @db.VarChar(26)
  tagId               String    @db.VarChar(26)
  imageId             String?   @db.VarChar(26)
  status              String    @default("draft") @db.VarChar(20)
  title               String    @db.VarChar(255)
  slug                String    @unique @db.VarChar(255)
  description         String?   @db.Text
  descriptionRendered String?   @db.Text
  locale              String    @db.VarChar(10)
  createdBy           String    @db.VarChar(26)
  updatedBy           String?   @db.VarChar(26)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt
  deletedAt           DateTime?
  
  // Relations
  tag                 Tag       @relation("TagTranslations", fields: [tagId], references: [id], onDelete: Cascade)
  image               Media?    @relation("TagTranslationImage", fields: [imageId], references: [id], onDelete: SetNull)
  creator             User      @relation("TagTranslationCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  updater             User?     @relation("TagTranslationUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)

  @@index([createdBy])
  @@index([imageId])
  @@index([title])
  @@index([locale])
  @@index([status])
  @@index([tagId])
  @@index([updatedBy])
}

model PostToTag {
  postId    String   @db.VarChar(26)
  tagId     String   @db.VarChar(26)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model User {
  id                            String           @id @default(ulid()) @db.VarChar(26)
  name                          String           @db.VarChar(100)
  lastName                      String?          @db.VarChar(100)
  username                      String           @unique @db.VarChar(100)
  password                      String           @db.VarChar(255)
  email                         String           @unique @db.VarChar(255)
  locale                        String?          @db.VarChar(10)
  locked                        Boolean          @default(false)
  validated                     Boolean          @default(false)
  lastLogin                     DateTime?
  confirmationKey               String?          @db.VarChar(255)
  passwordResetToken            String?          @db.VarChar(255)
  passwordResetTokenExpiresAt   DateTime?
  passwordResetTokenEmailsSent  Int              @default(0)
  privateKey                    String?          @db.VarChar(255)
  apiKey                        String?          @db.VarChar(255)
  avatar                        String?          @db.VarChar(26)
  birthday                      DateTime?        @db.Date
  bio                           String?          @db.Text
  newsletter                    Boolean          @default(false)
  gender                        String?          @db.VarChar(10)
  phone                         String?          @db.VarChar(20)
  mainUrl                       String?          @db.VarChar(255)
  externalId                    String?          @db.VarChar(255)
  corporation                   String?          @db.VarChar(255)
  note                          String?          @db.Text
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @default(now()) @updatedAt
  deletedAt                     DateTime?
  status                        String           @default("default") @db.VarChar(20)
  
  // Relations
  avatarMedia                   Media?           @relation("UserAvatar", fields: [avatar], references: [id], onDelete: SetNull)
  mediasCreated                 Media[]          @relation("MediaCreatedBy")
  postsCreated                  Post[]           @relation("PostCreatedBy")
  postTranslationsCreated       PostTranslation[] @relation("PostTranslationCreatedBy")
  postTranslationsUpdated       PostTranslation[] @relation("PostTranslationUpdatedBy")
  tagsCreated                   Tag[]            @relation("TagCreatedBy")
  tagTranslationsCreated        TagTranslation[] @relation("TagTranslationCreatedBy")
  tagTranslationsUpdated        TagTranslation[] @relation("TagTranslationUpdatedBy")

  @@index([avatar])
  @@index([status])
  @@index([username])
  @@index([name, lastName, corporation])
}